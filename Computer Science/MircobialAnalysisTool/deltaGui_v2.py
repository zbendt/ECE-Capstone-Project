from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
import deltaImageProcessor      #image analysis
import robo_controls            #automation controls
import time
import sys
import os

#GLOBALS

CLIENT_NAME = ""
CUR_SAMPLE = 0
TEST_RES = "RESULT"
COL_COUNT = 0
THRESHOLD = 0
TOTAL_SAMPLES = 0
WAIT = False
END = False

""" ---- WorkerSignals ----  

This class is used for sending pyqtsignals
during various parts of the analysis process

-------------------------------"""

class WorkerSignals(QObject):
    finished = pyqtSignal()
    next_samp = pyqtSignal()
    pause = pyqtSignal()
    

""" ---- Worker ----  

This is the class that will be contructed
and passed into the threadpool that will
handle our analysis process. This is what
allows the GUI to update and run the 
computer vision analysis simultaneously.

-------------------------------"""

class Worker(QRunnable):
        
    def __init__(self, fn):
        super(Worker, self).__init__()
       
        self.fn = fn
        self.signals = WorkerSignals()
        
    @pyqtSlot()
    def run(self):
        #import globals
        global CUR_SAMPLE
        global TEST_RES
        global COL_COUNT
        global THRESHOLD
        global TOTAL_SAMPLES
                    
        while(CUR_SAMPLE < TOTAL_SAMPLES-1):
            
            while(WAIT == True):                #used when stop button is pressed
                time.sleep(0.01)                #wait
            if(END == True):            
                print("Resetting System")       #used when reset button is pressed
                robo_controls.drop()            #drop sample
                robo_controls.move_to_start()   #move to home
                break
            else:
                robo_controls.move_to_start()   #move to home
                robo_controls.pickup()          #pickup sample
                robo_controls.move_to_camera()  #move to camera
                print("Processing Sample " + str(CUR_SAMPLE))   #for debugging     
                COL_COUNT = deltaImageProcessor.AnalyzeSample(CUR_SAMPLE) #run analysis
                
                if(COL_COUNT < THRESHOLD):          #assign test result        
                    TEST_RES = "PASS"               #microbial count below threshold
                    robo_controls.move_to_passed()  #move sample to passed stack
                else:
                    TEST_RES = "FAIL"               #microbial count above threshold
                    robo_controls.move_to_failed()  #move sample to fail stack

                self.signals.next_samp.emit()   #send signal to grab the next sample
            
        self.signals.finished.emit()            # Done. All samples analyzed.
        
    def __del__(self):                          #destructor
        self.signals.pause.emit()               #stop thread
        


""" ---- UI_MircrobialAnalysis ----

This class is the contructor for the User Interface.
It handles the placement, sizing and labeling of
all the buttons, labels and other QObjects that make
up the user interface.  This also holds the function
definitions for the actions that should be taken
when a button is pressed. Much of the layout sections
of this class were auto-generated by QtDesigner and
then tweaked to suit oour needs. See README for more
details.

------------------------------------------------"""
class Ui_MicrobialAnalysis(object):

    def setupUi(self, MicrobialAnalysis):
        MicrobialAnalysis.setObjectName("MicrobialAnalysis")
        MicrobialAnalysis.resize(742, 617)
        MicrobialAnalysis.setAutoFillBackground(True)

        self.centralwidget = QWidget(MicrobialAnalysis)
        self.centralwidget.setObjectName("centralwidget")
        self.controls = QGroupBox(self.centralwidget)
        self.controls.setGeometry(QRect(10, 8, 241, 514))

        #Font setup
        font = QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        
        #create an area for controls
        self.controls.setFont(font)
        self.controls.setObjectName("controls")

        #create an area for buttons
        self.buttonsWidget = QWidget(self.controls)
        self.buttonsWidget.setGeometry(QRect(10, 180, 221, 321))
        self.buttonsWidget.setObjectName("buttonsWidget")
        
        #create reset button
        self.resetButton = QPushButton(self.buttonsWidget)
        self.resetButton.setGeometry(QRect(0, 220, 221, 81))
        self.resetButton.setFont(font)
        self.resetButton.setObjectName("resetButton")

        #create stop button
        self.stopButton = QPushButton(self.buttonsWidget)
        self.stopButton.setGeometry(QRect(0, 120, 221, 75))
        self.stopButton.setFont(font)
        self.stopButton.setObjectName("stopButton")

        #create and place start button
        self.startButton = QPushButton(self.buttonsWidget)
        self.startButton.setGeometry(QRect(0, 20, 221, 75))
        self.startButton.setFont(font)
        self.startButton.setObjectName("startButton")
            
        #create spin box for user input of number of samples to be analyzed.    
        self.numberOfSamples = QSpinBox(self.controls)
        self.numberOfSamples.setGeometry(QRect(140, 50, 81, 31))
        self.numberOfSamples.setMaximum(999)
        self.numberOfSamples.setObjectName("numberOfSamples")

        #create label for number of samples spinbox
        self.spinBoxLabel = QLabel(self.controls)
        self.spinBoxLabel.setGeometry(QRect(10, 30, 121, 64))
        self.spinBoxLabel.setWordWrap(True)
        self.spinBoxLabel.setObjectName("spinBoxLabel")

        #create spin box for user input of theshold value used for PASS/FAIL test.    
        self.threshold = QSpinBox(self.controls)
        self.threshold.setGeometry(QRect(140, 110, 81, 31))
        self.threshold.setMaximum(999)
        self.threshold.setObjectName("threshold")
        
        #create label for threshold spinbox
        self.thresholdLabel = QLabel(self.controls)
        self.thresholdLabel.setGeometry(QRect(10, 100, 121, 61))
        self.thresholdLabel.setWordWrap(True)
        self.thresholdLabel.setObjectName("thresholdLabel")
        
        #create area for sample information to be displayed
        self.resultsGroupBox = QGroupBox(self.centralwidget)
        self.resultsGroupBox.setGeometry(QRect(260, 8, 471, 234))
        self.resultsGroupBox.setFont(font)
        self.resultsGroupBox.setObjectName("resultsGroupBox")

        #create sample number header label
        self.sampleNumber = QLabel(self.resultsGroupBox)
        self.sampleNumber.setGeometry(QRect(210, 80, 231, 41))
        self.sampleNumber.setFont(font)
        self.sampleNumber.setAutoFillBackground(False)
        self.sampleNumber.setAlignment(Qt.AlignCenter)
        self.sampleNumber.setObjectName("sampleNumber")

        #create client name header label
        self.clientName = QLabel(self.resultsGroupBox)
        self.clientName.setGeometry(QRect(210, 30, 231, 41))  
        self.clientName.setFont(font)
        self.clientName.setAutoFillBackground(False)
        self.clientName.setScaledContents(False)
        self.clientName.setAlignment(Qt.AlignCenter)
        self.clientName.setObjectName("clientName")
        
        #create test results header label
        self.passFail = QLabel(self.resultsGroupBox)
        self.passFail.setGeometry(QRect(210, 130, 231, 41))
        self.passFail.setFont(font)
        self.passFail.setAutoFillBackground(False)
        self.passFail.setAlignment(Qt.AlignCenter)
        self.passFail.setObjectName("passFail")

        #create microbial colony count header label
        self.colonyCount = QLabel(self.resultsGroupBox)
        self.colonyCount.setGeometry(QRect(210, 180, 231, 41))
        self.colonyCount.setFont(font)
        self.colonyCount.setAutoFillBackground(False)
        self.colonyCount.setAlignment(Qt.AlignCenter)
        self.colonyCount.setObjectName("colonyCount")

        #create label for the client info to be displayed
        self.clientLabel = QLabel(self.resultsGroupBox)
        self.clientLabel.setGeometry(QRect(30, 30, 171, 41))
        self.clientLabel.setObjectName("clientLabel")

        #create label for the current sample number to be displayed
        self.sampleNumLabel = QLabel(self.resultsGroupBox)
        self.sampleNumLabel.setGeometry(QRect(30, 80, 171, 41))
        self.sampleNumLabel.setObjectName("sampleNumLabel")
  
        #create label for the test results of current sample to be displayed
        self.passFailLabel = QLabel(self.resultsGroupBox)
        self.passFailLabel.setGeometry(QRect(30, 130, 171, 41))
        self.passFailLabel.setObjectName("passFailLabel")
        
        #create a label for the current sample colony count to be displayed
        self.colonycountLabel = QLabel(self.resultsGroupBox)
        self.colonycountLabel.setGeometry(QRect(30, 180, 171, 41))
        self.colonycountLabel.setObjectName("colonycountLabel")

        #create progress bar and set range to be 0-(total number of samples)
        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QRect(20, 530, 711, 41))
        self.progressBar.setFont(font)
        self.progressBar.setProperty("value", 25)
        self.progressBar.setAlignment(Qt.AlignCenter)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setObjectName("progressBar")
        self.progressBar.setRange(0, TOTAL_SAMPLES)

        #create area for image of current sample to be displayed
        self.Image = QGroupBox(self.centralwidget)
        self.Image.setGeometry(QRect(260, 230, 471, 292))
        self.Image.setFont(font)
        self.Image.setTitle("")
        self.Image.setObjectName("Image")

        #create the label where image will be displayed
        #and load initalized image into GUI
        self.sampleImage = QLabel(self.Image)
        self.sampleImage.setGeometry(QRect(60, 37, 350, 240))
        self.sampleImage.setText("")
        directory = os.getcwd()     #assumes inital image is in cwd
        imageName = "sample_0.jpg"  #this is the name of the image that will shown on startup
        self.sampleImage.setPixmap(QPixmap(os.path.join(directory, imageName)))
        self.sampleImage.setScaledContents(True)
        self.sampleImage.setMinimumSize(10, 10)
        self.sampleImage.setObjectName("sampleImage")
        
        #creates user interface window
        MicrobialAnalysis.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MicrobialAnalysis)
        self.menubar.setGeometry(QRect(0, 0, 742, 25))
        self.menubar.setObjectName("menubar")
        MicrobialAnalysis.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MicrobialAnalysis)
        self.statusbar.setObjectName("statusbar")
        MicrobialAnalysis.setStatusBar(self.statusbar)
        self.retranslateUi(MicrobialAnalysis)
        QMetaObject.connectSlotsByName(MicrobialAnalysis)
        
        #these signals link the functions associated with button presses
        self.startButton.clicked.connect(self.start_clicked)
        self.stopButton.clicked.connect(self.stop_clicked) 
        self.resetButton.clicked.connect(self.reset_clicked)
        
        #creates a threadpool for the two threads.
        self.threadpool = QThreadPool()
        
    def retranslateUi(self, MicrobialAnalysis):
        """ Sets the inital values for the labels"""

        _translate = QCoreApplication.translate
        MicrobialAnalysis.setWindowTitle(_translate("MicrobialAnalysis", "Microbial Analysis Tool"))
        self.controls.setTitle(_translate("MicrobialAnalysis", "Controls"))
        self.resetButton.setText(_translate("MicrobialAnalysis", "Reset"))
        self.stopButton.setText(_translate("MicrobialAnalysis", "Stop"))
        self.startButton.setText(_translate("MicrobialAnalysis", "Start"))
        self.spinBoxLabel.setText(_translate("MicrobialAnalysis", "Number of samples"))
        self.thresholdLabel.setText(_translate("MicrobialAnalysis", "Test Threshold"))
        self.resultsGroupBox.setTitle(_translate("MicrobialAnalysis", "Results"))
        self.sampleNumber.setText(_translate("MicrobialAnalysis", "sample_0"))
        self.clientName.setText(_translate("MicrobialAnalysis", "Client Inc."))
        self.passFail.setText(_translate("MicrobialAnalysis", "FAIL"))
        self.colonyCount.setText(_translate("MicrobialAnalysis", "16"))
        self.clientLabel.setText(_translate("MicrobialAnalysis", "Client Name"))
        self.sampleNumLabel.setText(_translate("MicrobialAnalysis", "Sample Number"))
        self.passFailLabel.setText(_translate("MicrobialAnalysis", "Pass/Fail"))
        self.colonycountLabel.setText(_translate("MicrobialAnalysis", "Colony Count"))
    

    def stop_clicked(self):
        """ Function that is called when STOP button is clicked"""
        global WAIT
        print ("Pausing system. Finishing current sample...")   #for debugging
        WAIT = True
        END = False
        

    def reset_clicked(self):
        """ Function that is called when RESET button is clicked"""
        global END          
        END = True
        WAIT = False
        
    def execute_this_fn(self):
        print("Running Samples")
        
    def next_sample(self):
        """Called when next_samp signal is emitted. It handles
           updateing the labels to reflect current information
           as well as updating the image to the current sample"""
        global CUR_SAMPLE
        global COL_COUNT
        global TEST_RES
        self.sampleNumber.setText(str(CUR_SAMPLE))  #update sample number
        self.colonyCount.setText(str(COL_COUNT))    #update colony count
        self.passFail.setText(str(TEST_RES))        #update test result
        cwd = os.getcwd()                           
        imdir = cwd + "/images_with_keys/"          #folder where analyzed images are stored
        imageName = str(CUR_SAMPLE) + ".jpg"        
        self.sampleImage.setPixmap(QPixmap(os.path.join(imdir, imageName))) #update image
        CUR_SAMPLE += 1                             #increment sample number
        
    def thread_complete(self):
        """called when finished signal is emitted."""
        print("Analysis Complete!")
 
    def start_clicked(self):
        """Called when START button is clicked.  Initalizes total number of samples
           and threshold values from user inputs and creates worker and worker signal
           instances and loads them into the threadpool."""

        global THRESHOLD
        global TOTAL_SAMPLES
        global WAIT
        if(WAIT == True):       #check if paused
            WAIT = False        #if paused reset WAIT and continue
        else:
            TOTAL_SAMPLES = self.numberOfSamples.value()
            THRESHOLD = self.threshold.value()
            worker = Worker(self.execute_this_fn)
            worker.signals.next_samp.connect(self.next_sample)
            worker.signals.finished.connect(self.thread_complete)
            self.threadpool.start(worker) 
        
if __name__ == "__main__":
    #import_excel_info()
    app = QApplication(sys.argv)
    MicrobialAnalysis = QMainWindow()
    ui = Ui_MicrobialAnalysis()
    ui.setupUi(MicrobialAnalysis)
    MicrobialAnalysis.show()
    sys.exit(app.exec_())
